name: CI
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.buildtype }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        name: [windows, linux]
        #name: [windows, linux, macosx]
        buildtype: [Release, Debug]
        link: [compatibility]
        include:
          - name: windows
            os: windows
            tree: tree /f /a 
            requirements: start ./windows.bat
            premake: |
              curl -L https://github.com/premake/premake-core/releases/download/v5.0.0-alpha15/premake-5.0.0-alpha15-windows.zip -o premakeA
              Expand-Archive premakeA -DestinationPath ./
              ./premake5.exe vs2019
            link: performance
          - name: linux
            os: ubuntu
            tree: |
              sudo apt install tree
              tree -a .
            requirements: source ./linux.sh
            premake: |
              curl -L https://github.com/premake/premake-core/releases/download/v5.0.0-alpha15/premake-5.0.0-alpha15-linux.tar.gz -o premakeA.tar.gz
              tar -xvzf premakeA.tar.gz -C ./
              ./premake5 gmake
          #- name: macosx
          #  os: macos
          #  tree: |
          #    brew install tree
          #    tree -a
          #  requirements: source ./macos.sh
          #  premake: |
          #    curl -L https://github.com/premake/premake-core/releases/download/v5.0.0-alpha15/premake-5.0.0-alpha15-macosx.tar.gz -o premakeA.tar.gz
          #    tar -xvzf premakeA.tar.gz -C ./
          #    ./premake5 gmake2
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    #- run: chmod +x ./headers.bat
    - run: ${{ matrix.requirements }}
    - uses: ilammy/msvc-dev-cmd@v1
    - name: 'CMake'
      uses: lukka/run-cmake@v2
      if: "contains(matrix.link, 'compatibility')"
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtBasic
        useVcpkgToolchainFile: true
        cmakeBuildType: ${{ matrix.buildtype }}
        buildDirectory: '${{ github.workspace }}/out'
    - run: ${{ matrix.premake }}
      if: "contains(matrix.link, 'performance')"
    - run: "msbuild.exe ${{ github.workspace }}/projects/windows/vs2019/ultralight.sln -p:Configuration=${{ matrix.buildtype }} -p:Platform=x64"
      if: "contains(matrix.name, 'windows')&&contains(matrix.link, 'performance')"
    - run: ${{ matrix.tree }}
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}-${{ matrix.buildtype }}
        path: out/*
